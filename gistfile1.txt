cat  switchkiller.sh
#!/bin/bash


SSID="Deriv WiFi"


iwgetid | awk -F ESSID: '{print $2}' | grep -oP '(?<=").*(?=")' > /current.ssid

currentssid=$(cat /current.ssid)


curl -s ipinfo.io | grep country | awk '{print $2}' | grep -oP '(?<=").*(?=")' > /country.code

currentcode=$(cat /country.code)



#making a function which will be called if  VPN is not being used
###################################################################################################################################################

ufw_action()
{
ufw --force reset 
#allowing access from Microtik
ufw allow out from 192.168.60.0/24 &&
ufw allow to 34.117.59.81 from 0.0.0.0  &&
#denying outgoing traffic from any ip that doesn't match Mikrotik routet's subnet , loopback, IPv6.
ip addr | grep inet | awk '{ print $2}' | egrep -v '([a-z]|^127|192.168.60|^::)' | xargs ufw deny out from  2>/dev/null  &&
#for i in $(ifconfig | grep inet | awk '{ print $2}' | egrep -v '([a-z]|^127|192.168.60|^::)') ; do ufw deny out from $i; done  #the same as above

ufw enable
}
#######################################################################################################################################################


if [[ $currentssid != $SSID &&  $currentcode==BY  ]] ;
  then ufw_action && echo connection blocked for  SSID:  $currentssid from location: $currentcode at $(date)>>/tmp/connections.log
  else echo successful connection to SSID: $currentssid from loacation: $currentcode at  $(date)>>/tmp/connections.log
fi

